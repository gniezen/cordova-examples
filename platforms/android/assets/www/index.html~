<!DOCTYPE html>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
     KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->
<html>
    <head>
        <meta charset="utf-8" />
        <meta name="format-detection" content="telephone=no" />
        <meta name="msapplication-tap-highlight" content="no" />
        <!-- WARNING: for iOS 7, remove the width=device-width and height=device-height attributes. See https://issues.apache.org/jira/browse/CB-4323 -->
        <meta name="viewport" content="user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width, height=device-height, target-densitydpi=device-dpi" />
        <link rel="stylesheet" type="text/css" href="css/index.css" />
        <title>Hello World</title>

        <!-- Custom code starts here -->
   
        <script type="text/javascript" charset="utf-8">

        var watchID = null;   

        // Start watching the sensors
        function startWatch() {

            // Update compass every 3 seconds
            var options = { frequency: 3000 };

            var watchID = navigator.compass.watchHeading(onSuccess, onError, options);

            navigator.proximity.enableSensor();

            setInterval(function(){
              navigator.proximity.getProximityState(proximitySuccess);
            }, 1000); //update proximity every second

            // Disabled as HTC Wildfire S does not have gyro sensor
            // var watchID2 = navigator.gyroscope.watchAngularSpeed(gyroSuccess, gyroError, options);

            var watchID3 = navigator.accelerometer.watchAcceleration(accelSuccess, accelError, options);


            var watchID4 = navigator.geolocation.watchPosition(gpsSuccess, gpsError, { timeout: 30000, enableHighAccuracy: false });

        }

        // Stop watching the sensors
        function stopWatch() {
            if (watchID) {
                navigator.compass.clearWatch(watchID);
                watchID = null;
            }

            if (watchID3) {
                navigator.accelerometer.clearWatch(watchID3);
                watchID3 = null;
            }

            if (watchID4) {
                navigator.geolocation.clearWatch(watchID4);
                watchID4 = null;
            }
        }

        // Get the current heading
        function onSuccess(heading) {
            var element = document.getElementById('heading');
            element.innerHTML = 'Heading: ' + heading.magneticHeading;
        }

        // Failed to get the heading
        function onError(compassError) {
            alert('Compass error: ' + compassError.code);
        }

        // Get proximity (near/far)
        function proximitySuccess(state) {
            var element = document.getElementById('proximity');
            element.innerHTML = 'Proximity: ' + (state ? 'near' : 'far');
        };

        // Get gyroscope data
        function gyroSuccess(speed) {
            var element = document.getElementById('gyro');
            element.innerHTML = 'Gyro: ' + 'x: ' + speed.x + ', y: ' + speed.y + ', z: ' + speed.z;
        };

        // Failed to get gyroscope data
        function gyroError(error) {
            alert('Gyro error:' + error.code + ', ' + error.message);
        };

        // Get accelerometer data
        function accelSuccess(acceleration) {
            var element = document.getElementById('accel');
            element.innerHTML ='Acceleration X: ' + acceleration.x + '\n' +
                  'Acceleration Y: ' + acceleration.y + '\n' +
                  'Acceleration Z: ' + acceleration.z + '\n' +
                  'Timestamp: '      + acceleration.timestamp + '\n';
        };

        // Failed to get accelerometer data
        function accelError(error) {
            alert('Accelerometer error:' + error.code + ', ' + error.message);
        };

        // Get A-GPS data
        function gpsSuccess(position) {
            var element = document.getElementById('geolocation');
            element.innerHTML = 'Latitude: ' + position.coords.latitude + '<br />' + 'Longitude: ' + position.coords.longitude + '<br />';
        }

        // Failed to get A-GPS data
        function gpsError(error) {
            alert('GPS error:' + error.code + ', ' + error.message);
        }


    </script>

    <!-- Custom code ends here -->

  </head>
  <body>
            <h1>Cordova Sensors</h1>
            <div id="deviceready" class="blink">
                <p class="event listening">Connecting to Device</p>
                <p class="event received">Device is Ready</p>
            </div>

            <!-- Custom code starts here -->
            <div id="heading">Waiting for heading...</div>
            <div id="proximity">Waiting for proximity...</div>
            <div id="gyro">Waiting for gyro...</div>
            <div id="geolocation">Waiting for geolocation...</div>
            <div id="accel">Waiting for accelerometer..</div>
            <button onclick="startWatch();">Start Watching</button>
            <button onclick="stopWatch();">Stop Watching</button>
            <button onclick="navigator.vibrate([500,1000,1000,500,2000]);">Vibrate</button>
            <!-- Custom code ends here -->

        </div>
        <script type="text/javascript" src="cordova.js"></script>
        <script type="text/javascript" src="js/index.js"></script>
    </body>
</html>
